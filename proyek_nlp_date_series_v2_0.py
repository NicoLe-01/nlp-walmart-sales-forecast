# -*- coding: utf-8 -*-
"""Proyek NLP Date Series v2.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GCxdEs7KgW2VDKbt0T08yPY9MHQSL0zX

Dataset : https://www.kaggle.com/datasets/aslanahmedov/walmart-sales-forecast

Import Modul
"""

import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

"""Baca Dataset"""

df = pd.read_csv('/content/train.csv')

df.tail()

"""Hilangkan kolom Store, Dept, IsHoliday"""

df.drop(columns=['Store', 'Dept', 'IsHoliday'])

"""Ambil hanya 5000 data"""

df = df[:5000]

dates = df['Date'].values
sales = df[['Weekly_Sales']].values

plt.plot(dates, sales)
plt.title('Sales Average',
          fontsize=20)

"""Gunakan Scaler untuk normalisasi data"""

scaler = MinMaxScaler()
scaled_sales = scaler.fit_transform(sales)

scaled_sales

scaled_sales.shape

"""Ubah dimensi array"""

scaled_sales = np.reshape(scaled_sales, newshape=(-1))

scaled_sales.shape

plt.plot(dates, scaled_sales)
plt.title('Sales Average',
          fontsize=20)

"""Bagi Dataset"""

sales_train, sales_test, dates_train, dates_test = train_test_split(scaled_sales, dates, test_size=0.2, random_state=1)

"""Windowed dataset"""

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(sales_train, window_size=30, batch_size=100, shuffle_buffer=1000)

"""Model"""

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(128, return_sequences=True),
  tf.keras.layers.Dropout(0.4),
  tf.keras.layers.LSTM(64),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(32, activation="relu"),
  tf.keras.layers.Dense(16, activation="relu"),
  tf.keras.layers.Dense(1),
])

"""Optimizer"""

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

"""Implementasi Callback"""

def scheduler(epoch, lr):
  if epoch < 10:
    return lr
  else:
    return lr * tf.math.exp(-0.1)

my_callback = tf.keras.callbacks.LearningRateScheduler(scheduler)

"""Train Model"""

history = model.fit(train_set,epochs=50, callbacks=[my_callback])

"""Plot Loss"""

loss = history.history['loss']
plt.plot(loss)
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train loss'], loc='upper right')
plt.show()

"""Plot Mae"""

mae = history.history['mae']
plt.plot(loss)
plt.ylabel('Mae')
plt.xlabel('Epoch')
plt.legend(['Mae'], loc='upper right')
plt.show()